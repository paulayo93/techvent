{"version":3,"sources":["src/app/user/login.component.html","src/app/user/profile.component.html","src/app/user/login.component.ts","src/app/user/profile.component.ts","src/app/user/user.module.ts","src/app/user/user.routes.ts"],"names":[],"mappings":"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","sourcesContent":["export default \"<h1>Login</h1>\\r\\n<hr />\\r\\n<div class=\\\"col-md-4\\\">\\r\\n  <form #loginForm=\\\"ngForm\\\" (ngSubmit)=\\\"login(loginForm.value)\\\" autocomplete=\\\"off\\\">\\r\\n    <div class=\\\"form-group\\\">\\r\\n      <label for=\\\"userName\\\">User Name:</label>\\r\\n      <em *ngIf=\\\"\\r\\n          loginForm.controls.userName?.invalid &&\\r\\n          (loginForm.controls.userName?.touched || mouseoverLogin)\\r\\n        \\\" novalidate>Required</em>\\r\\n      <input (ngModel)=\\\"username\\\" name=\\\"userName\\\" id=\\\"userName\\\" type=\\\"text\\\" class=\\\"form-control\\\"\\r\\n        placeholder=\\\"User Name...\\\" required />\\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"form-group\\\">\\r\\n      <label for=\\\"password\\\">Password:</label>\\r\\n      <em *ngIf=\\\"\\r\\n          loginForm.controls.password?.invalid &&\\r\\n          (loginForm.controls.password?.touched || mouseoverLogin)\\r\\n        \\\">Required</em>\\r\\n      <input class=\\\"form-control\\\"\\r\\n      (ngModel)=\\\"password\\\" name=\\\"password\\\" id=\\\"password\\\" type=\\\"password\\\"  placeholder=\\\"Password...\\\"\\r\\n        required />\\r\\n    </div>\\r\\n    <span (mouseenter)=\\\"mouseoverLogin = true\\\" (mouseleave)=\\\"mouseoverLogin = false\\\">\\r\\n      <button type=\\\"submit\\\" [disabled]=\\\"loginForm.invalid\\\" class=\\\"btn btn-primary\\\">\\r\\n        Login\\r\\n      </button>\\r\\n    </span>\\r\\n    <button type=\\\"button\\\" (click)=\\\"cancel()\\\" class=\\\"btn btn-default\\\">\\r\\n      Cancel\\r\\n    </button>\\r\\n  </form>\\r\\n  <br />\\r\\n  <br />\\r\\n  <div *ngIf=\\\"loginInvalid\\\" class=\\\"alert alert-danger\\\">Invalid Login Info</div>\\r\\n</div>\\r\\n\"","export default \"<div>\\r\\n    <h1>Edit Your Profile </h1>\\r\\n    <hr>\\r\\n    <div class=\\\"col-md-4\\\">\\r\\n      <form [formGroup]=\\\"profileForm\\\" (ngSubmit)=\\\"saveProfile(profileForm.value)\\\" autocomplete=\\\"off\\\" novalidate>\\r\\n        <div class=\\\"form-group\\\" [ngClass]=\\\"{'error':!validateFirstName()}\\\">\\r\\n          <label for=\\\"firstName\\\">First Name:</label>\\r\\n          <em *ngIf=\\\"!validateFirstName() && \\r\\n          profileForm.controls.firstName.errors.required\\\">Required</em>\\r\\n          <em *ngIf=\\\"!validateFirstName() &&\\r\\n          profileForm.controls.firstName.errors.patterns\\\">Must start with a letter</em>\\r\\n          <input formControlName=\\\"firstName\\\" id=\\\"firstName\\\" type=\\\"text\\\" class=\\\"form-control\\\" placeholder=\\\"First Name...\\\" />\\r\\n        </div>\\r\\n        <div class=\\\"form-group\\\"[ngClass]=\\\"{'error':!validateLastName()}\\\">\\r\\n          <label for=\\\"lastName\\\">Last Name:</label>\\r\\n          <em *ngIf=\\\"!validateLastName()\\\">Required</em>\\r\\n          <input formControlName=\\\"lastName\\\" id=\\\"lastName\\\" type=\\\"text\\\" class=\\\"form-control\\\" placeholder=\\\"Last Name...\\\" />\\r\\n        </div>\\r\\n  \\r\\n        <button type=\\\"submit\\\" class=\\\"btn btn-primary\\\">Save</button>\\r\\n        <button  (click)=\\\"cancel()\\\" type=\\\"button\\\" class=\\\"btn btn-default\\\">Cancel</button>\\r\\n\\r\\n        <button  (click)=\\\"cancel()\\\" type=\\\"button\\\" class=\\\"btn btn-warning\\\"\\r\\n        style=\\\"float:right\\\" (click)=\\\"logout()\\\">Logout</button>\\r\\n      </form>\\r\\n    </div>\\r\\n  </div>\"","import { Component } from '@angular/core';\r\nimport { AuthService } from './auth.service';\r\nimport { Router } from '@angular/router';\r\n\r\n@Component({\r\n    templateUrl: './login.component.html',\r\n    styles: [`\r\n        em {float:right; color: #E05C65; padding-left: 10;}\r\n    `]\r\n})\r\nexport class LoginComponent {\r\n    username;\r\n    password;\r\n    mouseoverLogin;\r\n    loginInvalid = false;\r\n    constructor(private authService: AuthService,\r\n                private router: Router) {}\r\n\r\n    login(formValues) {\r\n        this.authService.loginUser(formValues.userName,\r\n            formValues.password).subscribe(resp => {\r\n                if (!resp) {\r\n                    this.loginInvalid = true;\r\n                } else {\r\n                    this.router.navigate(['events']);\r\n                }\r\n            });\r\n\r\n    }\r\n\r\n    cancel() {\r\n        this.router.navigate(['events']);\r\n    }\r\n}\r\n","import { Component, OnInit, Inject } from '@angular/core';\r\nimport { FormControl, FormGroup, Validator, Validators } from '@angular/forms';\r\n\r\nimport { AuthService} from './auth.service';\r\nimport { Router } from '@angular/router';\r\nimport { TOASTR_TOKEN, Toastr } from '../common/toastr.service';\r\n\r\n\r\n@Component({\r\n  templateUrl: './profile.component.html',\r\n  styles: [`\r\n    em {float:right; color:#E05C65; padding-left: 10px;}\r\n    .error input {background-color:#E3C3C5;}\r\n    .error ::-webkit-input-placeholder {color: #999;}\r\n    .error ::-moz-placeholder { color: #999;}\r\n    .error ::-moz-placeholder {color: #999;}\r\n    .error ::-ms-input-placeholder {color: #999;}\r\n  `]\r\n})\r\nexport class ProfileComponent implements OnInit {\r\n\r\n  profileForm: FormGroup;\r\n  private firstName: FormControl;\r\n  private lastName: FormControl;\r\n\r\n       constructor(private authService: AuthService,\r\n                   private router: Router,\r\n                   @Inject(TOASTR_TOKEN) private toastr: Toastr) {}\r\n\r\n\r\n       ngOnInit() {\r\n         this.firstName = new FormControl(this.authService.currentUser.firstName,\r\n          [Validators.required, Validators.pattern('[a-zA-Z]')]);\r\n         this.lastName = new FormControl(this.authService.currentUser.lastName, Validators.required);\r\n         this.profileForm = new FormGroup({\r\n          firstName: this.firstName,\r\n          lastName: this.lastName\r\n         });\r\n       }\r\n\r\n       saveProfile(formValues) {\r\n         if (this.profileForm.valid) {\r\n          this.authService\r\n          .updateCurrentUser(formValues.firstName,\r\n            formValues.lastName)\r\n            .subscribe(() => {\r\n              this.toastr.success('Profile Saved ');\r\n            });\r\n\r\n\r\n        }\r\n      }\r\n\r\n      logout() {\r\n        this.authService.logout()\r\n        .subscribe(() => {\r\n          this.router.navigate(['/user/login']);\r\n        });\r\n      }\r\n\r\n      validateLastName() {\r\n\r\n        return this.lastName.valid || this.lastName.untouched;\r\n      }\r\n      validateFirstName() {\r\n\r\n        return this.firstName.valid || this.firstName.untouched;\r\n      }\r\n\r\n       cancel() {\r\n         this.router.navigate(['events']);\r\n       }\r\n}\r\n","import  { NgModule } from '@angular/core';\r\nimport { RouterModule } from '@angular/router';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\n\r\nimport { ProfileComponent } from './profile.component';\r\nimport { userRoutes } from './user.routes';\r\nimport { LoginComponent } from './login.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n      CommonModule,\r\n      ReactiveFormsModule,\r\n      FormsModule,\r\n    RouterModule.forChild(userRoutes)\r\n  ],\r\n  declarations: [\r\n    ProfileComponent,\r\n    LoginComponent\r\n  ]\r\n})\r\nexport class UserModule {}\r\n","import { ProfileComponent } from './profile.component';\r\nimport { Routes } from '@angular/router';\r\nimport { LoginComponent } from './login.component';\r\n\r\nexport const userRoutes: Routes = [\r\n    {path: 'profile', component: ProfileComponent},\r\n    {path: 'login', component: LoginComponent}\r\n];\r\n"],"sourceRoot":"webpack:///","file":"user-user-module-es5.js"}